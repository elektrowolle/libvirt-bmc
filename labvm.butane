variant: fcos
version: 1.4.0
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMS13b3znoVb1B7kRyKeQFpOn+dK6zPV47Z1ITAchle0 elektrowolle
    - name: benji
      ssh_authorized_keys:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMS13b3znoVb1B7kRyKeQFpOn+dK6zPV47Z1ITAchle0 elektrowolle

systemd:
  units:
    - name: rpm-ostree-install-libvirt-instaweb.service
      enabled: True
      contents: |
        [Unit]
        Description=Layer libvirt dependencies
        Wants=network-online.target
        After=network-online.target
        Before=zincati.service
        ConditionPathExists=!/var/lib/%N.stamp
        FailureAction=reboot
        SuccessAction=reboot

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree override remove nfs-utils-coreos
        ExecStart=-/usr/bin/rpm-ostree install --apply-live \
            --allow-inactive --assumeyes \
            bridge-utils \
            git-daemon \
            git-instaweb \
            gitweb \
            httpd \
            libguestfs-tools \
            libvirt-client \
            libvirt-daemon-config-network \
            libvirt-daemon-kvm \
            libvirt-nss \
            lldpd \
            python3-libguestfs \
            qemu-kvm \
            virt-install \
            virt-top
        ExecStart=/bin/touch /var/lib/%N.stamp
        ExecStart=/usr/bin/systemctl reboot --no-block

        [Install]
        WantedBy=multi-user.target

    - name: skydive-allinone.service
      enabled: True
      contents: |
        [Unit]
        Description=Skydive Analyzer and Interface
        After=network-online.target
        Wants=network-online.target

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/bin/podman kill skydive-allinone
        ExecStartPre=-/bin/podman rm skydive-allinone
        ExecStartPre=-/bin/sh -c "podman image exists skydive/skydive:latest && podman pull docker.io/skydive/skydive"
        ExecStart=/bin/podman run --name skydive-allinone \
            -p 8082:8082 \
            --hostname skydive-allinone \
            docker.io/skydive/skydive allinone

        [Install]
        WantedBy=multi-user.target

    - name: skydive-libvirtd.service
      enabled: True
      contents: |
        [Unit]
        Description=Skydive agent for libvirtd
        After=skydive-network.service
        Wants=network-online.target
        Wants=llpd.service
        Wants=podman.socket
        Wants=libvirtd.service
        Wants=libvirtd.socket

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/bin/podman kill skydive-agent
        ExecStartPre=-/bin/podman rm skydive-agent
        ExecStartPre=-/bin/sh -c "podman image exists skydive/skydive:latest && podman pull docker.io/skydive/skydive"
        ExecStart=/bin/podman run --name skydive-agent \
            --hostname skydive-agent \
            -e SKYDIVE_AGENT_TOPOLOGY_PROBES='lldp libvirt netns docker' \
            -e SKYDIVE_ANALYZERS='localhost-allinone:8082' \
            -e SKYDIVE_AGENT_TOPOLOGY_NETNS_RUN_PATH='/host/netns' \
            -v /var/run/libvirt/libvirt-sock-ro:/var/run/libvirt/libvirt-sock-ro \
            -v /var/run/podman/podman.sock:/var/run/docker.sock \
            -v /var/run/netns:/host/netns \
            --pid=host \
            --privileged \
            --network host \
            docker.io/skydive/skydive agent

        [Install]
        WantedBy=multi-user.target

    - name: concourse-network.service
      enabled: True
      contents: |
        [Unit]
        Description=network for Concourse
        After=network-online.target
        Wants=network-online.target
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/podman network create concourse
        ExecStart=/bin/touch /var/lib/%N.stamp

        [Install]
        WantedBy=multi-user.target

    - name: concourse-db.service
      enabled: True
      contents: |
        [Unit]
        Description=Postgres DB for Concourse
        After=concourse-network.service
        Wants=network-online.target

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/bin/podman kill concourse-db
        ExecStartPre=-/bin/podman rm concourse-db
        ExecStartPre=-/bin/sh -c "podman image exists docker.io/postgres && podman pull docker.io/postgres"
        ExecStart=/bin/podman run --name concourse-db \
          --network concourse \
          -e POSTGRES_DB=concourse \
          -e POSTGRES_PASSWORD=concourse-pass \
          -e POSTGRES_USER=concourse-user \
          docker.io/postgres

        [Install]
        WantedBy=multi-user.target

    - name: concourse.service
      enabled: True
      contents: |
         [Unit]
         Description=Concourse Quickstart
         After=concourse-db.service
         Wants=network-online.target

         [Service]
         Restart=always
         TimeoutStartSec=0
         ExecStartPre=-/bin/podman kill concourse-quickstart
         ExecStartPre=-/bin/podman rm concourse-quickstart
         ExecStartPre=-/bin/sh -c "podman image exists docker.io/concourse/concourse  && /bin/podman pull docker.io/concourse/concourse"
         ExecStart=/bin/sh -c '/bin/podman run --name concourse-quickstart \
             --network concourse \
             -p 8080:8080 \
             -e CONCOURSE_POSTGRES_HOST=concourse-db \
             -e CONCOURSE_POSTGRES_USER=concourse-user \
             -e CONCOURSE_POSTGRES_PASSWORD=concourse-pass \
             -e CONCOURSE_POSTGRES_DATABASE=concourse \
             -e CONCOURSE_ADD_LOCAL_USER=user:user \
             -e CONCOURSE_MAIN_TEAM_LOCAL_USER=user \
             -e CONCOURSE_EXTERNAL_URL=http://$(ip addr show enp1s0 | sed -n "s/.* \(\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}\)\/.*/\1/p"):8080 \
             -e CONCOURSE_WORKER_BAGGAGECLAIM_DRIVER=overlay \
             -e CONCOURSE_X_FRAME_OPTIONS=allow \
             -e CONCOURSE_CONTENT_SECURITY_POLICY="*" \
             -e CONCOURSE_CLUSTER_NAME=lab \
             -e CONCOURSE_WORKER_CONTAINERD_DNS_SERVER="8.8.8.8" \
             -e CONCOURSE_WORKER_RUNTIME="containerd" \
             --privileged docker.io/concourse/concourse quickstart'
         [Install]
         WantedBy=multi-user.target

    - name: serial-getty@ttyS0.service
      enabled: True
      dropins:
      - name: autologin-core.conf
        contents: |
          [Service]
          # Override Execstart in main unit
          ExecStart=
          # Add new Execstart with `-` prefix to ignore failure`
          ExecStart=-/usr/sbin/agetty --autologin core --noclear %I $TERM
